# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-09-08 15:05
from __future__ import unicode_literals
import logging
import json

from django.db import migrations, transaction, models, connection



logger = logging.getLogger(__name__)



def remove_reverse_spam(apps, schema_editor):
	Change = apps.get_model('binder', 'Change')

	# This migration will also be called when initializing empty DBs (e.g., for tests).
	# In that case, we want to NOP quickly and silently.
	# No changes in the history is sufficient to detect that.
	# No changes in the history also guarantees that doing nothing is OK.
	if Change.objects.count() == 0:
		return



	logger.info('Running Binder migration 0003 - removing redundant FK/M2M binder history changes.')
	logger.info('See https://github.com/CodeYellowBV/django-binder/issues/76')
	print()

	all_models = apps.get_models()

	with transaction.atomic():
		print('Reverse FKs')
		for model in all_models:
			for field in model._meta.get_fields():
				if not isinstance(field, models.fields.reverse_related.ManyToOneRel):
					continue

				ct = Change.objects.filter(model=model.__name__, field=field.name).delete()[0]
				print('  cleaned {:>7} {}.{}'.format(ct, model.__name__, field.name))
		print()

		print('Reverse M2Ms')
		for model in all_models:
			for field in model._meta.get_fields():
				if not isinstance(field, models.fields.reverse_related.ManyToManyRel):
					continue

				ct = Change.objects.filter(model=model.__name__, field=field.name).delete()[0]
				print('  cleaned {:>7} {}.{}'.format(ct, model.__name__, field.name))
		print()

		print('Forward M2Ms')
		for model in all_models:
			for field in model._meta.get_fields():
				if not isinstance(field, models.fields.related.ManyToManyField):
					continue

				ct = 0
				for change in Change.objects.filter(model=model.__name__, field=field.name):
					ct += 1
					try:
						before = set(json.loads(change.before))
						after = set(json.loads(change.after))
						change.before = json.dumps(sorted(before - after))
						change.after = json.dumps(sorted(after - before))
						change.diff = True
						change.save()
					except TypeError as e:
						# The above code makes the assumption that changes are always hashable. This is not necessarily
						# the case. For now, if the change is not hashable, we do not clean up
						print(f"\t Warning, could not clean up change {change.pk} {e} Before: {before} After: {after} ")

				print('  cleaned {:>7} {}.{}'.format(ct, model.__name__, field.name))
		print()

	print('Running VACUUM FULL ANALYZE...')
	with connection.cursor() as cursor:
		cursor.execute('VACUUM FULL ANALYZE binder_change;')



def nop(apps, schema_editor):
	pass



class Migration(migrations.Migration):
	atomic = False

	dependencies = [
		('binder', '0002_change_diff'),
	]

	operations = [
		migrations.RunPython(remove_reverse_spam, nop),
	]
